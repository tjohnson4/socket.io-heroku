#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socket.io-heroku:server');
var http = require('http');
var socketIO = require('socket.io')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function isValidObj(obj, prop) {
  return (obj != null && obj.hasOwnProperty(prop));
}

var io = socketIO(server, {
  pingTimeout : 30000
});

var checkForTV = (room) => {
  var sockets = io.sockets.adapter.rooms[room].sockets;   
 
  for (var id in sockets ) {
    var socket = io.sockets.connected[id];
  
    if (socket.role === 'tv') {
      console.log("Found TV, room : "+room);
      return true;
      break;
    }
  }

  return false;
}

io.on('connection', (socket) => {
  console.log('Client connected');

  socket.on('subscribe', (obj) => {
    if (isValidObj(obj, 'room')) {
      socket.guid = obj.room;
      console.log("Received message : subscribe, id : "+socket.id)
      socket.join(obj.room);

      if (obj.hasOwnProperty('role') && obj.role === 'mobile') {
        socket.role = obj.role;
        // check for tv in room
        var sockets = io.sockets.adapter.rooms[obj.room].sockets;   
        var connected = false
       
        for (var id in sockets ) {
          var roomSocket = io.sockets.connected[id];
          if (roomSocket.role === 'tv') {
            connected = true;
            break;
          }
        }

        io.to(obj.room).emit("joined", { id : socket.id, room : obj.room, role : socket.role, tv_status : {
          connected : connected 
        }});
      } else {
        socket.role = 'tv';

        io.to(obj.room).emit("joined", { id : socket.id, room : obj.room, role : socket.role, tv_status : {
          connected : true 
        }});
        io.to(obj.room).emit("tv_status", {
          connected : true
        });
      }
    }
  }) 

  socket.on('request_connection', (obj) => {
    if (isValidObj(obj, 'room')) {
      console.log("Received message : request_connection, id : "+socket.id)
      socket.broadcast.to(obj.room).emit("request_connection");
    }
  }) 

  socket.on('connection_request_received', (obj) => {
    if (isValidObj(obj, 'room')) {
      console.log("Received message : connection_request_received, id : "+socket.id)
      socket.broadcast.to(obj.room).emit("connection_request_received");
    }
  }) 

  socket.on('play_now', (obj) => {
    if (isValidObj(obj, 'room')) {
      console.log("Received message : play_now", obj);
      socket.broadcast.to(obj.room).emit("play_now", obj);
    }
  }) 

  socket.on('received_play_now', (obj) => {
    if (isValidObj(obj, 'label') && isValidObj(obj, 'room')) {
      console.log("Received message : received_play_now, label : "+obj.label)
      socket.broadcast.to(obj.room).emit("received_play_now", obj);
    }
  }) 

  socket.on('disconnect', ()  => {
    if (socket.role === 'tv') {
      socket.broadcast.to(socket.guid).emit("tv_status", {connected:false});
    }
    console.log('Client disconnected, socket.role : '+socket.role+", room : "+socket.guid);
  });
});

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
